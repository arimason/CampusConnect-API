// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pub/user": {
            "post": {
                "description": "Create User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "User request created",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resource.createAuthReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    }
                }
            }
        },
        "/pub/user/login": {
            "post": {
                "description": "Request for Login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User request login",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resource.loginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/resource.loginResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/resource.errorResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "resource.createAuthReq": {
            "type": "object",
            "required": [
                "courseID",
                "email",
                "firstName",
                "lastName",
                "name",
                "password",
                "permission"
            ],
            "properties": {
                "courseID": {
                    "description": "id do curso",
                    "type": "string"
                },
                "email": {
                    "description": "email realizado para fazer login",
                    "type": "string"
                },
                "firstName": {
                    "description": "nome",
                    "type": "string"
                },
                "lastName": {
                    "description": "sobrenome",
                    "type": "string"
                },
                "name": {
                    "description": "nome realizado para fazer login",
                    "type": "string"
                },
                "password": {
                    "description": "senha deve conter pelo menos 8 caracteres",
                    "type": "string",
                    "minLength": 8
                },
                "permission": {
                    "description": "permission deve ser um desses valores: 'student', 'teacher', 'admin', 'owner'",
                    "type": "string"
                }
            }
        },
        "resource.errorResp": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "refere diretamente ao erro",
                    "type": "string"
                },
                "message": {
                    "description": "referente a mensagem tratada do erro",
                    "type": "string"
                }
            }
        },
        "resource.loginReq": {
            "type": "object",
            "required": [
                "emailOrName",
                "password"
            ],
            "properties": {
                "emailOrName": {
                    "description": "nick ou email usado para realizar login",
                    "type": "string"
                },
                "password": {
                    "description": "senha",
                    "type": "string"
                }
            }
        },
        "resource.loginResp": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "token utilizado para autenticacao",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAtuh": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "Header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "134.65.242.39:18181",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Campus Connect API",
	Description:      "API for university",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
